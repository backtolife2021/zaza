{
  "add": {
    "annotations": [],
    "signature": "add({filetypes})",
    "parameters": [["", "filetypes"]],
    "parameters_doc": {
      "filetypes": "(table) A table containing new filetype maps\n                 (see example)."
    },
    "doc": [
      "Add new filetype mappings.",
      "Filetype mappings can be added either by extension or by\nfilename (either the \"tail\" or the full file path). The full\nfile path is checked first, followed by the file name. If a\nmatch is not found using the filename, then the filename is\nmatched against the list of |lua-patterns| (sorted by\npriority) until a match is found. Lastly, if pattern matching\ndoes not find a filetype, then the file extension is used.",
      "The filetype can be either a string (in which case it is used\nas the filetype directly) or a function. If a function, it\ntakes the full path and buffer number of the file as arguments\n(along with captures from the matched pattern, if any) and\nshould return a string that will be used as the buffer's\nfiletype. Optionally, the function can return a second\nfunction value which, when called, modifies the state of the\nbuffer. This can be used to, for example, set\nfiletype-specific buffer variables.",
      "Filename patterns can specify an optional priority to resolve\ncases when a file path matches multiple patterns. Higher\npriorities are matched first. When omitted, the priority\ndefaults to 0.",
      "See $VIMRUNTIME/lua/vim/filetype.lua for more examples.",
      "Note that Lua filetype detection is only enabled when\n|g:do_filetype_lua| is set to 1.",
      "Example: >\n\n  vim.filetype.add({\n    extension = {\n      foo = \"fooscript\",\n      bar = function(path, bufnr)\n        if some_condition() then\n          return \"barscript\", function(bufnr)\n            -- Set a buffer variable\n            vim.b[bufnr].barscript_version = 2\n          end\n        end\n        return \"bar\"\n      end,\n    },\n    filename = {\n      [\".foorc\"] = \"toml\",\n      [\"/etc/foo/config\"] = \"toml\",\n    },\n    pattern = {\n      [\".*&zwj;/etc/foo/.*\"] = \"fooscript\",\n      -- Using an optional priority\n      [\".*&zwj;/etc/foo/.*%.conf\"] = { \"dosini\", { priority = 10 } },\n      [\"README.(%a+)$\"] = function(path, bufnr, ext)\n        if ext == \"md\" then\n          return \"markdown\"\n        elseif ext == \"rst\" then\n          return \"rst\"\n        end\n      end,\n    },\n  })\n \n<"
    ],
    "return": [],
    "seealso": []
  },
  "basename": {
    "annotations": [],
    "signature": "basename({file})",
    "parameters": [["", "file"]],
    "parameters_doc": { "file": "(string) File or directory" },
    "doc": ["Return the basename of the given file or directory"],
    "return": ["(string) Basename of {file}"],
    "seealso": []
  },
  "cmd": {
    "annotations": [],
    "signature": "cmd({command})",
    "parameters": [["", "command"]],
    "parameters_doc": {
      "command": "string|table Command(s) to execute. If a\n               string, executes multiple lines of Vim script\n               at once. In this case, it is an alias to\n               |nvim_exec()|, where `output` is set to false.\n               Thus it works identical to |:source|. If a\n               table, executes a single command. In this case,\n               it is an alias to |nvim_cmd()| where `opts` is\n               empty."
    },
    "doc": [
      "Execute Vim script commands.",
      "Example: >\n\n   vim.cmd('echo 42')\n   vim.cmd([[\n     augroup My_group\n       autocmd!\n       autocmd FileType c setlocal cindent\n     augroup END\n   ]])\n   vim.cmd({ cmd = 'echo', args = { '\"foo\"' } })\n \n<"
    ],
    "return": [],
    "seealso": ["|ex-cmd-index|"]
  },
  "connection_failure_errmsg": {
    "annotations": [],
    "signature": "connection_failure_errmsg({consequence})",
    "parameters": [["", "consequence"]],
    "parameters_doc": {},
    "doc": [],
    "return": [],
    "seealso": []
  },
  "deep_equal": {
    "annotations": [],
    "signature": "deep_equal({a}, {b})",
    "parameters": [
      ["", "a"],
      ["", "b"]
    ],
    "parameters_doc": { "a": "any First value", "b": "any Second value" },
    "doc": [
      "Deep compare values for equality",
      "Tables are compared recursively unless they both provide the `eq` metamethod. All other types are compared using the equality `==` operator."
    ],
    "return": ["(boolean) `true` if values are equals, else `false`"],
    "seealso": []
  },
  "deepcopy": {
    "annotations": [],
    "signature": "deepcopy({orig})",
    "parameters": [["", "orig"]],
    "parameters_doc": { "orig": "(table) Table to copy" },
    "doc": [
      "Returns a deep copy of the given object. Non-table objects are\ncopied as in a typical Lua assignment, whereas table objects\nare copied recursively. Functions are naively copied, so\nfunctions in the copied table point to the same functions as\nthose in the input table. Userdata and threads are not copied\nand will throw an error."
    ],
    "return": ["(table) Table of copied keys and (nested) values."],
    "seealso": []
  },
  "defer_fn": {
    "annotations": [],
    "signature": "defer_fn({fn}, {timeout})",
    "parameters": [
      ["", "fn"],
      ["", "timeout"]
    ],
    "parameters_doc": {
      "fn": "Callback to call once `timeout` expires",
      "timeout": "Number of milliseconds to wait before calling\n               `fn`"
    },
    "doc": [
      "Defers calling `fn` until `timeout` ms passes.",
      "Use to do a one-shot timer that calls `fn` Note: The {fn} is |schedule_wrap|ped automatically, so API\nfunctions are safe to call."
    ],
    "return": ["timer luv timer object"],
    "seealso": []
  },
  "del": {
    "annotations": [],
    "signature": "del({modes}, {lhs}, {opts})",
    "parameters": [
      ["", "modes"],
      ["", "lhs"],
      ["", "opts"]
    ],
    "parameters_doc": {
      "opts": "(table) A table of optional arguments:\n            • buffer: (number or boolean) Remove a mapping\n              from the given buffer. When \"true\" or 0, use the\n              current buffer."
    },
    "doc": [
      "Remove an existing mapping. Examples: >\n\n   vim.keymap.del('n', 'lhs')\n\n   vim.keymap.del({'n', 'i', 'v'}, '<leader>w', { buffer = 5 })\n \n<"
    ],
    "return": [],
    "seealso": ["|vim.keymap.set()|"]
  },
  "deprecate": {
    "annotations": [],
    "signature": "deprecate({name}, {alternative}, {version}, {plugin}, {backtrace})",
    "parameters": [
      ["", "name"],
      ["", "alternative"],
      ["", "version"],
      ["", "plugin"],
      ["", "backtrace"]
    ],
    "parameters_doc": {
      "name": "string Deprecated function.",
      "alternative": "(string|nil) Preferred alternative\n                   function.",
      "version": "string Version in which the deprecated\n                   function will be removed.",
      "plugin": "string|nil Plugin name that the function\n                   will be removed from. Defaults to \"Nvim\".",
      "backtrace": "boolean|nil Prints backtrace. Defaults to\n                   true."
    },
    "doc": ["Display a deprecation notification to the user."],
    "return": [],
    "seealso": []
  },
  "dir": {
    "annotations": [],
    "signature": "dir({path})",
    "parameters": [["", "path"]],
    "parameters_doc": {
      "path": "(string) An absolute or relative path to the\n            directory to iterate over. The path is first\n            normalized |vim.fs.normalize()|."
    },
    "doc": ["Return an iterator over the files and directories located in\n{path}"],
    "return": [
      "Iterator over files and directories in {path}. Each\n    iteration yields two values: name and type. Each \"name\" is\n    the basename of the file or directory relative to {path}.\n    Type is one of \"file\" or \"directory\"."
    ],
    "seealso": []
  },
  "dirname": {
    "annotations": [],
    "signature": "dirname({file})",
    "parameters": [["", "file"]],
    "parameters_doc": { "file": "(string) File or directory" },
    "doc": ["Return the parent directory of the given file or directory"],
    "return": ["(string) Parent directory of {file}"],
    "seealso": []
  },
  "endswith": {
    "annotations": [],
    "signature": "endswith({s}, {suffix})",
    "parameters": [
      ["", "s"],
      ["", "suffix"]
    ],
    "parameters_doc": { "s": "(string) String", "suffix": "(string) Suffix to match" },
    "doc": ["Tests if `s` ends with `suffix`."],
    "return": ["(boolean) `true` if `suffix` is a suffix of `s`"],
    "seealso": []
  },
  "find": {
    "annotations": [],
    "signature": "find({names}, {opts})",
    "parameters": [
      ["", "names"],
      ["", "opts"]
    ],
    "parameters_doc": {
      "names": "(string|table) Names of the files and directories\n             to find. Must be base names, paths and globs are\n             not supported.",
      "opts": "(table) Optional keyword arguments:\n             • path (string): Path to begin searching from. If\n               omitted, the current working directory is used.\n             • upward (boolean, default false): If true,\n               search upward through parent directories.\n               Otherwise, search through child directories\n               (recursively).\n             • stop (string): Stop searching when this\n               directory is reached. The directory itself is\n               not searched.\n             • type (string): Find only files (\"file\") or\n               directories (\"directory\"). If omitted, both\n               files and directories that match {name} are\n               included.\n             • limit (number, default 1): Stop the search\n               after finding this many matches. Use\n               `math.huge` to place no limit on the number of\n               matches."
    },
    "doc": [
      "Find files or directories in the given path.",
      "Finds any files or directories given in {names} starting from\n{path}. If {upward} is \"true\" then the search traverses upward\nthrough parent directories; otherwise, the search traverses\ndownward. Note that downward searches are recursive and may\nsearch through many directories! If {stop} is non-nil, then\nthe search stops when the directory given in {stop} is\nreached. The search terminates when {limit} (default 1)\nmatches are found. The search can be narrowed to find only\nfiles or or only directories by specifying {type} to be \"file\"\nor \"directory\", respectively."
    ],
    "return": ["(table) The paths of all matching files or directories"],
    "seealso": []
  },
  "gsplit": {
    "annotations": [],
    "signature": "gsplit({s}, {sep}, {plain})",
    "parameters": [
      ["", "s"],
      ["", "sep"],
      ["", "plain"]
    ],
    "parameters_doc": {
      "s": "(string) String to split",
      "sep": "(string) Separator or pattern",
      "plain": "(boolean) If `true` use `sep` literally (passed\n             to string.find)"
    },
    "doc": ["Splits a string at each instance of a separator."],
    "return": ["(function) Iterator over the split components"],
    "seealso": [
      "|vim.split()|",
      "https://www.lua.org/pil/20.2.html",
      "http://lua-users.org/wiki/StringLibraryTutorial"
    ]
  },
  "input": {
    "annotations": [],
    "signature": "input({opts}, {on_confirm})",
    "parameters": [
      ["", "opts"],
      ["", "on_confirm"]
    ],
    "parameters_doc": {
      "opts": "(table) Additional options. See |input()|\n                  • prompt (string|nil) Text of the prompt\n                  • default (string|nil) Default reply to the\n                    input\n                  • completion (string|nil) Specifies type of\n                    completion supported for input. Supported\n                    types are the same that can be supplied to\n                    a user-defined command using the\n                    \"-complete=\" argument. See\n                    |:command-completion|\n                  • highlight (function) Function that will be\n                    used for highlighting user inputs.",
      "on_confirm": "(function) ((input|nil) -> ()) Called once\n                  the user confirms or abort the input.\n                  `input` is what the user typed. `nil` if the\n                  user aborted the dialog."
    },
    "doc": [
      "Prompts the user for input",
      "Example: >\n\n vim.ui.input({ prompt = 'Enter value for shiftwidth: ' }, function(input)\n     vim.o.shiftwidth = tonumber(input)\n end)\n \n<"
    ],
    "return": [],
    "seealso": []
  },
  "inspect": {
    "annotations": [],
    "signature": "inspect({object}, {options})",
    "parameters": [
      ["", "object"],
      ["", "options"]
    ],
    "parameters_doc": {},
    "doc": ["Return a human-readable representation of the given object."],
    "return": [],
    "seealso": [
      "https://github.com/kikito/inspect.lua",
      "https://github.com/mpeterv/vinspect"
    ]
  },
  "is_callable": {
    "annotations": [],
    "signature": "is_callable({f})",
    "parameters": [["", "f"]],
    "parameters_doc": { "f": "any Any object" },
    "doc": ["Returns true if object `f` can be called as a function."],
    "return": ["(boolean) `true` if `f` is callable, else `false`"],
    "seealso": []
  },
  "list_extend": {
    "annotations": [],
    "signature": "list_extend({dst}, {src}, {start}, {finish})",
    "parameters": [
      ["", "dst"],
      ["", "src"],
      ["", "start"],
      ["", "finish"]
    ],
    "parameters_doc": {
      "dst": "(table) List which will be modified and appended\n              to",
      "src": "(table) List from which values will be inserted",
      "start": "(number) Start index on src. Defaults to 1",
      "finish": "(number) Final index on src. Defaults to `#src`"
    },
    "doc": [
      "Extends a list-like table with the values of another list-like\ntable.",
      "NOTE: This mutates dst!"
    ],
    "return": ["(table) dst"],
    "seealso": ["|vim.tbl_extend()|"]
  },
  "list_slice": {
    "annotations": [],
    "signature": "list_slice({list}, {start}, {finish})",
    "parameters": [
      ["", "list"],
      ["", "start"],
      ["", "finish"]
    ],
    "parameters_doc": {
      "list": "(table) Table",
      "start": "(number) Start range of slice",
      "finish": "(number) End range of slice"
    },
    "doc": [
      "Creates a copy of a table containing only elements from start\nto end (inclusive)"
    ],
    "return": ["(table) Copy of table sliced from start to finish\n    (inclusive)"],
    "seealso": []
  },
  "match": {
    "annotations": [],
    "signature": "match({arg})",
    "parameters": [["", "arg"]],
    "parameters_doc": {
      "arg": "(table) Table specifying which matching strategy to\n           use. Accepted keys are:\n           • buf (number): Buffer number to use for matching.\n             Mutually exclusive with {contents}\n           • filename (string): Filename to use for matching.\n             When {buf} is given, defaults to the filename of\n             the given buffer number. The file need not\n             actually exist in the filesystem. When used\n             without {buf} only the name of the file is used\n             for filetype matching. This may result in failure\n             to detect the filetype in cases where the\n             filename alone is not enough to disambiguate the\n             filetype.\n           • contents (table): An array of lines representing\n             file contents to use for matching. Can be used\n             with {filename}. Mutually exclusive with {buf}."
    },
    "doc": [
      "Perform filetype detection.",
      "The filetype can be detected using one of three methods:\n1. Using an existing buffer\n2. Using only a file name\n3. Using only file contents\n",
      "Of these, option 1 provides the most accurate result as it\nuses both the buffer's filename and (optionally) the buffer\ncontents. Options 2 and 3 can be used without an existing\nbuffer, but may not always provide a match in cases where the\nfilename (or contents) cannot unambiguously determine the\nfiletype.",
      "Each of the three options is specified using a key to the\nsingle argument of this function. Example:",
      ">\n\n   -- Using a buffer number\n   vim.filetype.match({ buf = 42 })\n\n   -- Override the filename of the given buffer\n   vim.filetype.match({ buf = 42, filename = 'foo.c' })\n\n   -- Using a filename without a buffer\n   vim.filetype.match({ filename = 'main.lua' })\n\n   -- Using file contents\n   vim.filetype.match({ contents = {'#!/usr/bin/env bash'} })\n \n<"
    ],
    "return": [
      "(string|nil) If a match was found, the matched filetype.",
      "(function|nil) A function that modifies buffer state when\n    called (for example, to set some filetype specific buffer\n    variables). The function accepts a buffer number as its\n    only argument."
    ],
    "seealso": []
  },
  "normalize": {
    "annotations": [],
    "signature": "normalize({path})",
    "parameters": [["", "path"]],
    "parameters_doc": { "path": "(string) Path to normalize" },
    "doc": [
      "Normalize a path to a standard format. A tilde (~) character\nat the beginning of the path is expanded to the user's home\ndirectory and any backslash (\\) characters are converted to\nforward slashes (/). Environment variables are also expanded.",
      "Example: >\n\n vim.fs.normalize('C:\\Users\\jdoe')\n => 'C:/Users/jdoe'\n\n vim.fs.normalize('~/src/neovim')\n => '/home/jdoe/src/neovim'\n\n vim.fs.normalize('$XDG_CONFIG_HOME/nvim/init.vim')\n => '/Users/jdoe/.config/nvim/init.vim'\n \n<"
    ],
    "return": ["(string) Normalized path"],
    "seealso": []
  },
  "notify": {
    "annotations": [],
    "signature": "notify({msg}, {level}, {opts})",
    "parameters": [
      ["", "msg"],
      ["", "level"],
      ["", "opts"]
    ],
    "parameters_doc": {
      "msg": "(string) Content of the notification to show to\n             the user.",
      "level": "(number|nil) One of the values from\n             |vim.log.levels|.",
      "opts": "(table|nil) Optional parameters. Unused by\n             default."
    },
    "doc": [
      "Display a notification to the user.",
      "This function can be overridden by plugins to display\nnotifications using a custom provider (such as the system\nnotification provider). By default, writes to |:messages|."
    ],
    "return": [],
    "seealso": []
  },
  "notify_once": {
    "annotations": [],
    "signature": "notify_once({msg}, {level}, {opts})",
    "parameters": [
      ["", "msg"],
      ["", "level"],
      ["", "opts"]
    ],
    "parameters_doc": {
      "msg": "(string) Content of the notification to show to\n             the user.",
      "level": "(number|nil) One of the values from\n             |vim.log.levels|.",
      "opts": "(table|nil) Optional parameters. Unused by\n             default."
    },
    "doc": [
      "Display a notification only one time.",
      "Like |vim.notify()|, but subsequent calls with the same\nmessage will not display a notification."
    ],
    "return": ["(boolean) true if message was displayed, else false"],
    "seealso": []
  },
  "on_key": {
    "annotations": [],
    "signature": "on_key({fn}, {ns_id})",
    "parameters": [
      ["", "fn"],
      ["", "ns_id"]
    ],
    "parameters_doc": {
      "fn": "function: Callback function. It should take one\n             string argument. On each key press, Nvim passes\n             the key char to fn(). |i_CTRL-V| If {fn} is nil,\n             it removes the callback for the associated\n             {ns_id}",
      "ns_id": "number? Namespace ID. If nil or 0, generates and\n             returns a new |nvim_create_namespace()| id."
    },
    "doc": [
      "Adds Lua function {fn} with namespace id {ns_id} as a listener\nto every, yes every, input key.",
      "The Nvim command-line option |-w| is related but does not\nsupport callbacks and cannot be toggled dynamically.",
      "\nNote:\n    {fn} will not be cleared by |nvim_buf_clear_namespace()|\n\nNote:\n    {fn} will receive the keys after mappings have been\n    evaluated\n"
    ],
    "return": [
      "(number) Namespace id associated with {fn}. Or count of\n    all callbacks if on_key() is called without arguments.",
      "\nNote:\n    {fn} will be removed if an error occurs while calling.\n"
    ],
    "seealso": []
  },
  "parents": {
    "annotations": [],
    "signature": "parents({start})",
    "parameters": [["", "start"]],
    "parameters_doc": { "start": "(string) Initial file or directory." },
    "doc": [
      "Iterate over all the parents of the given file or directory.",
      "Example: >\n\n local root_dir\n for dir in vim.fs.parents(vim.api.nvim_buf_get_name(0)) do\n   if vim.fn.isdirectory(dir .. \"/.git\") == 1 then\n     root_dir = dir\n     break\n   end\n end\n\n if root_dir then\n   print(\"Found git repository at\", root_dir)\n end\n \n<"
    ],
    "return": ["(function) Iterator"],
    "seealso": []
  },
  "paste": {
    "annotations": [],
    "signature": "paste({lines}, {phase})",
    "parameters": [
      ["", "lines"],
      ["", "phase"]
    ],
    "parameters_doc": {
      "lines": "|readfile()|-style list of lines to paste.\n             |channel-lines|",
      "phase": "-1: \"non-streaming\" paste: the call contains all\n             lines. If paste is \"streamed\", `phase` indicates the stream state:\n             • 1: starts the paste (exactly once)\n             • 2: continues the paste (zero or more times)\n             • 3: ends the paste (exactly once)"
    },
    "doc": [
      "Paste handler, invoked by |nvim_paste()| when a conforming UI\n(such as the |TUI|) pastes text into the editor.",
      "Example: To remove ANSI color codes when pasting: >\n\n vim.paste = (function(overridden)\n   return function(lines, phase)\n     for i,line in ipairs(lines) do\n       -- Scrub ANSI color codes from paste input.\n       lines[i] = line:gsub('\\27%[[0-9;mK]+', '')\n     end\n     overridden(lines, phase)\n   end\n end)(vim.paste)\n \n<"
    ],
    "return": ["false if client should cancel the paste."],
    "seealso": ["|paste|"]
  },
  "pesc": {
    "annotations": [],
    "signature": "pesc({s})",
    "parameters": [["", "s"]],
    "parameters_doc": { "s": "(string) String to escape" },
    "doc": ["Escapes magic chars in a Lua pattern."],
    "return": ["(string) %-escaped pattern string"],
    "seealso": ["https://github.com/rxi/lume"]
  },
  "pretty_print": {
    "annotations": [],
    "signature": "pretty_print({...})",
    "parameters": [["", "..."]],
    "parameters_doc": {},
    "doc": [
      "Prints given arguments in human-readable format. Example: >\n  -- Print highlight group Normal and store it's contents in a variable.\n  local hl_normal = vim.pretty_print(vim.api.nvim_get_hl_by_name(\"Normal\", true))\n\n<"
    ],
    "return": ["given arguments."],
    "seealso": ["|vim.inspect()|"]
  },
  "region": {
    "annotations": [],
    "signature": "region({bufnr}, {pos1}, {pos2}, {regtype}, {inclusive})",
    "parameters": [
      ["", "bufnr"],
      ["", "pos1"],
      ["", "pos2"],
      ["", "regtype"],
      ["", "inclusive"]
    ],
    "parameters_doc": {
      "bufnr": "(number) of buffer",
      "pos1": "(line, column) tuple marking beginning of\n                 region",
      "pos2": "(line, column) tuple marking end of region",
      "regtype": "type of selection (:help setreg)",
      "inclusive": "(boolean) indicating whether the selection is\n                 end-inclusive"
    },
    "doc": [
      "Get a table of lines with start, end columns for a region\nmarked by two points"
    ],
    "return": ["region lua table of the form {linenr = {startcol,endcol}}"],
    "seealso": []
  },
  "schedule_wrap": {
    "annotations": [],
    "signature": "schedule_wrap({cb})",
    "parameters": [["", "cb"]],
    "parameters_doc": {},
    "doc": ["Defers callback `cb` until the Nvim API is safe to call."],
    "return": [],
    "seealso": ["|lua-loop-callbacks|", "|vim.schedule()|", "|vim.in_fast_event()|"]
  },
  "select": {
    "annotations": [],
    "signature": "select({items}, {opts}, {on_choice})",
    "parameters": [
      ["", "items"],
      ["", "opts"],
      ["", "on_choice"]
    ],
    "parameters_doc": {
      "items": "(table) Arbitrary items",
      "opts": "(table) Additional options\n                 • prompt (string|nil) Text of the prompt.\n                   Defaults to `Select one of:`\n                 • format_item (function item -> text)\n                   Function to format an individual item from\n                   `items`. Defaults to `tostring`.\n                 • kind (string|nil) Arbitrary hint string\n                   indicating the item shape. Plugins\n                   reimplementing `vim.ui.select` may wish to\n                   use this to infer the structure or\n                   semantics of `items`, or the context in\n                   which select() was called.",
      "on_choice": "(function) ((item|nil, idx|nil) -> ()) Called\n                 once the user made a choice. `idx` is the\n                 1-based index of `item` within `items`. `nil`\n                 if the user aborted the dialog."
    },
    "doc": [
      "Prompts the user to pick a single item from a collection of\nentries",
      "Example: >\n\n vim.ui.select({ 'tabs', 'spaces' }, {\n     prompt = 'Select tabs or spaces:',\n     format_item = function(item)\n         return \"I'd like to choose \" .. item\n     end,\n }, function(choice)\n     if choice == 'spaces' then\n         vim.o.expandtab = true\n     else\n         vim.o.expandtab = false\n     end\n end)\n \n<"
    ],
    "return": [],
    "seealso": []
  },
  "set": {
    "annotations": [],
    "signature": "set({mode}, {lhs}, {rhs}, {opts})",
    "parameters": [
      ["", "mode"],
      ["", "lhs"],
      ["", "rhs"],
      ["", "opts"]
    ],
    "parameters_doc": {
      "mode": "string|table Same mode short names as\n            |nvim_set_keymap()|. Can also be list of modes to\n            create mapping on multiple modes.",
      "lhs": "(string) Left-hand side |{lhs}| of the mapping.",
      "rhs": "string|function Right-hand side |{rhs}| of the\n            mapping. Can also be a Lua function. If a Lua\n            function and `opts.expr == true`, returning `nil`\n            is equivalent to an empty string.",
      "opts": "(table) A table of |:map-arguments| such as\n            \"silent\". In addition to the options listed in\n            |nvim_set_keymap()|, this table also accepts the\n            following keys:\n            • buffer: (number or boolean) Add a mapping to the\n              given buffer. When \"true\" or 0, use the current\n              buffer.\n            • replace_keycodes: (boolean, default true) When\n              both this and expr is \"true\",\n              |nvim_replace_termcodes()| is applied to the\n              result of Lua expr maps.\n            • remap: (boolean) Make the mapping recursive.\n              This is the inverse of the \"noremap\" option from\n              |nvim_set_keymap()|. Default `false`."
    },
    "doc": [
      "Add a new |mapping|. Examples: >\n\n   -- Can add mapping to Lua functions\n   vim.keymap.set('n', 'lhs', function() print(\"real lua function\") end)\n\n   -- Can use it to map multiple modes\n   vim.keymap.set({'n', 'v'}, '<leader>lr', vim.lsp.buf.references, { buffer=true })\n\n   -- Can add mapping for specific buffer\n   vim.keymap.set('n', '<leader>w', \"<cmd>w<cr>\", { silent = true, buffer = 5 })\n\n   -- Expr mappings\n   vim.keymap.set('i', '<Tab>', function()\n     return vim.fn.pumvisible() == 1 and \"<C-n>\" or \"<Tab>\"\n   end, { expr = true })\n   -- <Plug> mappings\n   vim.keymap.set('n', '[%', '<Plug>(MatchitNormalMultiBackward)')\n \n<",
      "Note that in a mapping like: >\n\n    vim.keymap.set('n', 'asdf', require('jkl').my_fun)\n \n<",
      "the `require('jkl')` gets evaluated during this call in order to access the\nfunction. If you want to avoid this cost at startup you can\nwrap it in a function, for example: >\n\n    vim.keymap.set('n', 'asdf', function() return require('jkl').my_fun() end)\n \n<"
    ],
    "return": [],
    "seealso": ["|nvim_set_keymap()|"]
  },
  "split": {
    "annotations": [],
    "signature": "split({s}, {sep}, {kwargs})",
    "parameters": [
      ["", "s"],
      ["", "sep"],
      ["", "kwargs"]
    ],
    "parameters_doc": {
      "s": "(string) String to split",
      "sep": "(string) Separator or pattern",
      "kwargs": "(table) Keyword arguments:\n              • plain: (boolean) If `true` use `sep` literally\n                (passed to string.find)\n              • trimempty: (boolean) If `true` remove empty\n                items from the front and back of the list"
    },
    "doc": [
      "Splits a string at each instance of a separator.",
      "Examples: >\n\n  split(\":aa::b:\", \":\")     --> {'','aa','','b',''}\n  split(\"axaby\", \"ab?\")     --> {'','x','y'}\n  split(\"x*yz*o\", \"*\", {plain=true})  --> {'x','yz','o'}\n  split(\"|x|y|z|\", \"|\", {trimempty=true}) --> {'x', 'y', 'z'}\n \n<"
    ],
    "return": ["(table) List of split components"],
    "seealso": ["|vim.gsplit()|"]
  },
  "startswith": {
    "annotations": [],
    "signature": "startswith({s}, {prefix})",
    "parameters": [
      ["", "s"],
      ["", "prefix"]
    ],
    "parameters_doc": { "s": "(string) String", "prefix": "(string) Prefix to match" },
    "doc": ["Tests if `s` starts with `prefix`."],
    "return": ["(boolean) `true` if `prefix` is a prefix of `s`"],
    "seealso": []
  },
  "tbl_add_reverse_lookup": {
    "annotations": [],
    "signature": "tbl_add_reverse_lookup({o})",
    "parameters": [["", "o"]],
    "parameters_doc": { "o": "(table) Table to add the reverse to" },
    "doc": [
      "Add the reverse lookup values to an existing table. For\nexample: `tbl_add_reverse_lookup { A = 1 } == { [1] = 'A', A =\n1 }`",
      "Note that this modifies the input."
    ],
    "return": ["(table) o"],
    "seealso": []
  },
  "tbl_contains": {
    "annotations": [],
    "signature": "tbl_contains({t}, {value})",
    "parameters": [
      ["", "t"],
      ["", "value"]
    ],
    "parameters_doc": { "t": "(table) Table to check", "value": "any Value to compare" },
    "doc": ["Checks if a list-like (vector) table contains `value`."],
    "return": ["(boolean) `true` if `t` contains `value`"],
    "seealso": []
  },
  "tbl_count": {
    "annotations": [],
    "signature": "tbl_count({t})",
    "parameters": [["", "t"]],
    "parameters_doc": { "t": "(table) Table" },
    "doc": [
      "Counts the number of non-nil values in table `t`.",
      ">\n\n vim.tbl_count({ a=1, b=2 }) => 2\n vim.tbl_count({ 1, 2 }) => 2\n \n<"
    ],
    "return": ["(number) Number of non-nil values in table"],
    "seealso": ["https://github.com/Tieske/Penlight/blob/master/lua/pl/tablex.lua"]
  },
  "tbl_deep_extend": {
    "annotations": [],
    "signature": "tbl_deep_extend({behavior}, {...})",
    "parameters": [
      ["", "behavior"],
      ["", "..."]
    ],
    "parameters_doc": {
      "behavior": "(string) Decides what to do if a key is found\n                in more than one map:\n                • \"error\": raise an error\n                • \"keep\": use value from the leftmost map\n                • \"force\": use value from the rightmost map",
      "...": "(table) Two or more map-like tables"
    },
    "doc": ["Merges recursively two or more map-like tables."],
    "return": ["(table) Merged table"],
    "seealso": ["|tbl_extend()|"]
  },
  "tbl_extend": {
    "annotations": [],
    "signature": "tbl_extend({behavior}, {...})",
    "parameters": [
      ["", "behavior"],
      ["", "..."]
    ],
    "parameters_doc": {
      "behavior": "(string) Decides what to do if a key is found\n                in more than one map:\n                • \"error\": raise an error\n                • \"keep\": use value from the leftmost map\n                • \"force\": use value from the rightmost map",
      "...": "(table) Two or more map-like tables"
    },
    "doc": ["Merges two or more map-like tables."],
    "return": ["(table) Merged table"],
    "seealso": ["|extend()|"]
  },
  "tbl_filter": {
    "annotations": [],
    "signature": "tbl_filter({func}, {t})",
    "parameters": [
      ["", "func"],
      ["", "t"]
    ],
    "parameters_doc": {
      "func": "function|table Function or callable table",
      "t": "(table) Table"
    },
    "doc": ["Filter a table using a predicate function"],
    "return": ["(table) Table of filtered values"],
    "seealso": []
  },
  "tbl_flatten": {
    "annotations": [],
    "signature": "tbl_flatten({t})",
    "parameters": [["", "t"]],
    "parameters_doc": { "t": "(table) List-like table" },
    "doc": [
      "Creates a copy of a list-like table such that any nested\ntables are \"unrolled\" and appended to the result."
    ],
    "return": ["(table) Flattened copy of the given list-like table"],
    "seealso": [
      "From https://github.com/premake/premake-core/blob/master/src/base/table.lua"
    ]
  },
  "tbl_get": {
    "annotations": [],
    "signature": "tbl_get({o}, {...})",
    "parameters": [
      ["", "o"],
      ["", "..."]
    ],
    "parameters_doc": {
      "o": "(table) Table to index",
      "...": "(string) Optional strings (0 or more, variadic) via\n           which to index the table"
    },
    "doc": [
      "Index into a table (first argument) via string keys passed as\nsubsequent arguments. Return `nil` if the key does not exist.",
      "Examples: >\n\n  vim.tbl_get({ key = { nested_key = true }}, 'key', 'nested_key') == true\n  vim.tbl_get({ key = {}}, 'key', 'nested_key') == nil\n \n<"
    ],
    "return": ["any Nested value indexed by key (if it exists), else nil"],
    "seealso": []
  },
  "tbl_isempty": {
    "annotations": [],
    "signature": "tbl_isempty({t})",
    "parameters": [["", "t"]],
    "parameters_doc": { "t": "(table) Table to check" },
    "doc": ["Checks if a table is empty."],
    "return": ["(boolean) `true` if `t` is empty"],
    "seealso": ["https://github.com/premake/premake-core/blob/master/src/base/table.lua"]
  },
  "tbl_islist": {
    "annotations": [],
    "signature": "tbl_islist({t})",
    "parameters": [["", "t"]],
    "parameters_doc": { "t": "(table) Table" },
    "doc": [
      "Tests if a Lua table can be treated as an array.",
      "Empty table `{}` is assumed to be an array, unless it was\ncreated by |vim.empty_dict()| or returned as a dict-like |API|\nor Vimscript result, for example from |rpcrequest()| or\n|vim.fn|."
    ],
    "return": ["(boolean) `true` if array-like table, else `false`"],
    "seealso": []
  },
  "tbl_keys": {
    "annotations": [],
    "signature": "tbl_keys({t})",
    "parameters": [["", "t"]],
    "parameters_doc": { "t": "(table) Table" },
    "doc": [
      "Return a list of all keys used in a table. However, the order\nof the return table of keys is not guaranteed."
    ],
    "return": ["(table) List of keys"],
    "seealso": [
      "From https://github.com/premake/premake-core/blob/master/src/base/table.lua"
    ]
  },
  "tbl_map": {
    "annotations": [],
    "signature": "tbl_map({func}, {t})",
    "parameters": [
      ["", "func"],
      ["", "t"]
    ],
    "parameters_doc": {
      "func": "function|table Function or callable table",
      "t": "(table) Table"
    },
    "doc": ["Apply a function to all values of a table."],
    "return": ["(table) Table of transformed values"],
    "seealso": []
  },
  "tbl_values": {
    "annotations": [],
    "signature": "tbl_values({t})",
    "parameters": [["", "t"]],
    "parameters_doc": { "t": "(table) Table" },
    "doc": [
      "Return a list of all values used in a table. However, the\norder of the return table of values is not guaranteed."
    ],
    "return": ["(table) List of values"],
    "seealso": []
  },
  "trim": {
    "annotations": [],
    "signature": "trim({s})",
    "parameters": [["", "s"]],
    "parameters_doc": { "s": "(string) String to trim" },
    "doc": ["Trim whitespace (Lua pattern \"%s\") from both sides of a\nstring."],
    "return": ["(string) String with whitespace removed from its beginning\n    and end"],
    "seealso": ["https://www.lua.org/pil/20.2.html"]
  },
  "uri_from_bufnr": {
    "annotations": [],
    "signature": "uri_from_bufnr({bufnr})",
    "parameters": [["", "bufnr"]],
    "parameters_doc": { "bufnr": "(number)" },
    "doc": ["Get a URI from a bufnr"],
    "return": ["(string) URI"],
    "seealso": []
  },
  "uri_from_fname": {
    "annotations": [],
    "signature": "uri_from_fname({path})",
    "parameters": [["", "path"]],
    "parameters_doc": { "path": "(string) Path to file" },
    "doc": ["Get a URI from a file path."],
    "return": ["(string) URI"],
    "seealso": []
  },
  "uri_to_bufnr": {
    "annotations": [],
    "signature": "uri_to_bufnr({uri})",
    "parameters": [["", "uri"]],
    "parameters_doc": { "uri": "(string)" },
    "doc": [
      "Get the buffer for a uri. Creates a new unloaded buffer if no\nbuffer for the uri already exists."
    ],
    "return": ["(number) bufnr"],
    "seealso": []
  },
  "uri_to_fname": {
    "annotations": [],
    "signature": "uri_to_fname({uri})",
    "parameters": [["", "uri"]],
    "parameters_doc": { "uri": "(string)" },
    "doc": ["Get a filename from a URI"],
    "return": ["(string) filename or unchanged URI for non-file URIs"],
    "seealso": []
  },
  "validate": {
    "annotations": [],
    "signature": "validate({opt})",
    "parameters": [["", "opt"]],
    "parameters_doc": {
      "opt": "(table) Names of parameters to validate. Each key\n           is a parameter name; each value is a tuple in one\n           of these forms:\n           1. (arg_value, type_name, optional)\n              • arg_value: argument value\n              • type_name: string|table type name, one of:\n                (\"table\", \"t\", \"string\", \"s\", \"number\", \"n\",\n                \"boolean\", \"b\", \"function\", \"f\", \"nil\",\n                \"thread\", \"userdata\") or list of them.\n              • optional: (optional) boolean, if true, `nil`\n                is valid\n\n           2. (arg_value, fn, msg)\n              • arg_value: argument value\n              • fn: any function accepting one argument,\n                returns true if and only if the argument is\n                valid. Can optionally return an additional\n                informative error message as the second\n                returned value.\n              • msg: (optional) error string if validation\n                fails"
    },
    "doc": [
      "Validates a parameter specification (types and values).",
      "Usage example: >\n\n  function user.new(name, age, hobbies)\n    vim.validate{\n      name={name, 'string'},\n      age={age, 'number'},\n      hobbies={hobbies, 'table'},\n    }\n    ...\n  end\n \n<",
      "Examples with explicit argument values (can be run directly): >\n\n  vim.validate{arg1={{'foo'}, 'table'}, arg2={'foo', 'string'}}\n     => NOP (success)\n\n  vim.validate{arg1={1, 'table'}}\n     => error('arg1: expected table, got number')\n\n  vim.validate{arg1={3, function(a) return (a % 2) == 0 end, 'even number'}}\n     => error('arg1: expected even number, got 3')\n \n<",
      "If multiple types are valid they can be given as a list. >\n\n  vim.validate{arg1={{'foo'}, {'table', 'string'}}, arg2={'foo', {'table', 'string'}}}\n     => NOP (success)\n\n  vim.validate{arg1={1, {'string', table'}}}\n     => error('arg1: expected string|table, got number')\n\n \n<"
    ],
    "return": [],
    "seealso": []
  }
}
