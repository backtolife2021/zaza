{
  "LanguageTree:add_child": {
    "annotations": [],
    "signature": "LanguageTree:add_child({self}, {lang})",
    "parameters": [
      ["", "self"],
      ["", "lang"]
    ],
    "parameters_doc": { "lang": "The language to add.", "self": "" },
    "doc": [
      "Adds a child language to this tree.",
      "If the language already exists as a child, it will first be\nremoved."
    ],
    "return": [],
    "seealso": []
  },
  "LanguageTree:children": {
    "annotations": [],
    "signature": "LanguageTree:children({self})",
    "parameters": [["", "self"]],
    "parameters_doc": { "self": "" },
    "doc": ["Returns a map of language to child tree."],
    "return": [],
    "seealso": []
  },
  "LanguageTree:contains": {
    "annotations": [],
    "signature": "LanguageTree:contains({self}, {range})",
    "parameters": [
      ["", "self"],
      ["", "range"]
    ],
    "parameters_doc": {
      "range": "A range, that is a `{ start_line, start_col,\n             end_line, end_col }` table.",
      "self": ""
    },
    "doc": ["Determines whether {range} is contained in this language tree"],
    "return": [],
    "seealso": []
  },
  "LanguageTree:destroy": {
    "annotations": [],
    "signature": "LanguageTree:destroy({self})",
    "parameters": [["", "self"]],
    "parameters_doc": { "self": "" },
    "doc": [
      "Destroys this language tree and all its children.",
      "Any cleanup logic should be performed here.",
      "Note: This DOES NOT remove this tree from a parent. Instead, `remove_child` must be called on the parent to remove it."
    ],
    "return": [],
    "seealso": []
  },
  "LanguageTree:for_each_child": {
    "annotations": [],
    "signature": "LanguageTree:for_each_child({self}, {fn}, {include_self})",
    "parameters": [
      ["", "self"],
      ["", "fn"],
      ["", "include_self"]
    ],
    "parameters_doc": {
      "fn": "The function to invoke. This is invoked\n                    with arguments (tree: LanguageTree, lang:\n                    string)",
      "include_self": "Whether to include the invoking tree in\n                    the results.",
      "self": ""
    },
    "doc": ["Invokes the callback for each LanguageTree and it's children\nrecursively"],
    "return": [],
    "seealso": []
  },
  "LanguageTree:for_each_tree": {
    "annotations": [],
    "signature": "LanguageTree:for_each_tree({self}, {fn})",
    "parameters": [
      ["", "self"],
      ["", "fn"]
    ],
    "parameters_doc": {
      "fn": "The callback to invoke. The callback is invoked\n            with arguments (tree: TSTree, languageTree:\n            LanguageTree)",
      "self": ""
    },
    "doc": [
      "Invokes the callback for each treesitter trees recursively.",
      "Note, this includes the invoking language tree's trees as\nwell."
    ],
    "return": [],
    "seealso": []
  },
  "LanguageTree:included_regions": {
    "annotations": [],
    "signature": "LanguageTree:included_regions({self})",
    "parameters": [["", "self"]],
    "parameters_doc": { "self": "" },
    "doc": ["Gets the set of included regions"],
    "return": [],
    "seealso": []
  },
  "LanguageTree:invalidate": {
    "annotations": [],
    "signature": "LanguageTree:invalidate({self}, {reload})",
    "parameters": [
      ["", "self"],
      ["", "reload"]
    ],
    "parameters_doc": { "self": "" },
    "doc": ["Invalidates this parser and all its children"],
    "return": [],
    "seealso": []
  },
  "LanguageTree:is_valid": {
    "annotations": [],
    "signature": "LanguageTree:is_valid({self})",
    "parameters": [["", "self"]],
    "parameters_doc": { "self": "" },
    "doc": [
      "Determines whether this tree is valid. If the tree is invalid,\ncall `parse()` . This will return the updated tree."
    ],
    "return": [],
    "seealso": []
  },
  "LanguageTree:lang": {
    "annotations": [],
    "signature": "LanguageTree:lang({self})",
    "parameters": [["", "self"]],
    "parameters_doc": { "self": "" },
    "doc": ["Gets the language of this tree node."],
    "return": [],
    "seealso": []
  },
  "LanguageTree:language_for_range": {
    "annotations": [],
    "signature": "LanguageTree:language_for_range({self}, {range})",
    "parameters": [
      ["", "self"],
      ["", "range"]
    ],
    "parameters_doc": { "range": "A text range, see |LanguageTree:contains|", "self": "" },
    "doc": ["Gets the appropriate language that contains {range}"],
    "return": [],
    "seealso": []
  },
  "LanguageTree:parse": {
    "annotations": [],
    "signature": "LanguageTree:parse({self})",
    "parameters": [["", "self"]],
    "parameters_doc": { "self": "" },
    "doc": [
      "Parses all defined regions using a treesitter parser for the\nlanguage this tree represents. This will run the injection\nquery for this language to determine if any child languages\nshould be created."
    ],
    "return": [],
    "seealso": []
  },
  "LanguageTree:register_cbs": {
    "annotations": [],
    "signature": "LanguageTree:register_cbs({self}, {cbs})",
    "parameters": [
      ["", "self"],
      ["", "cbs"]
    ],
    "parameters_doc": {
      "cbs": "(table) An |nvim_buf_attach()|-like table argument\n            with the following keys :\n            • `on_bytes` : see |nvim_buf_attach()|, but this will be\n              called after the parsers callback.\n            • `on_changedtree` : a callback that will be\n              called every time the tree has syntactical\n              changes. It will only be passed one argument,\n              which is a table of the ranges (as node ranges)\n              that changed.\n            • `on_child_added` : emitted when a child is added\n              to the tree.\n            • `on_child_removed` : emitted when a child is\n              removed from the tree.",
      "self": ""
    },
    "doc": ["Registers callbacks for the parser."],
    "return": [],
    "seealso": []
  },
  "LanguageTree:remove_child": {
    "annotations": [],
    "signature": "LanguageTree:remove_child({self}, {lang})",
    "parameters": [
      ["", "self"],
      ["", "lang"]
    ],
    "parameters_doc": { "lang": "The language to remove.", "self": "" },
    "doc": ["Removes a child language from this tree."],
    "return": [],
    "seealso": []
  },
  "LanguageTree:set_included_regions": {
    "annotations": [],
    "signature": "LanguageTree:set_included_regions({self}, {regions})",
    "parameters": [
      ["", "self"],
      ["", "regions"]
    ],
    "parameters_doc": {
      "regions": "(table) list of regions this tree should manage\n               and parse.",
      "self": ""
    },
    "doc": [
      "Sets the included regions that should be parsed by this\nparser. A region is a set of nodes and/or ranges that will be\nparsed in the same context.",
      "For example, `{ { node1 }, { node2} }` is two separate\nregions. This will be parsed by the parser in two different\ncontexts... thus resulting in two separate trees.",
      "`{ { node1, node2 } }` is a single region consisting of two\nnodes. This will be parsed by the parser in a single\ncontext... thus resulting in a single tree.",
      "This allows for embedded languages to be parsed together\nacross different nodes, which is useful for templating\nlanguages like ERB and EJS.",
      "Note, this call invalidates the tree and requires it to be\nparsed again."
    ],
    "return": [],
    "seealso": []
  },
  "LanguageTree:source": {
    "annotations": [],
    "signature": "LanguageTree:source({self})",
    "parameters": [["", "self"]],
    "parameters_doc": { "self": "" },
    "doc": ["Returns the source content of the language tree (bufnr or\nstring)."],
    "return": [],
    "seealso": []
  },
  "LanguageTree:trees": {
    "annotations": [],
    "signature": "LanguageTree:trees({self})",
    "parameters": [["", "self"]],
    "parameters_doc": { "self": "" },
    "doc": [
      "Returns all trees this language tree contains. Does not\ninclude child languages."
    ],
    "return": [],
    "seealso": []
  },
  "Query:iter_captures": {
    "annotations": [],
    "signature": "Query:iter_captures({self}, {node}, {source}, {start}, {stop})",
    "parameters": [
      ["", "self"],
      ["", "node"],
      ["", "source"],
      ["", "start"],
      ["", "stop"]
    ],
    "parameters_doc": {
      "node": "The node under which the search will occur",
      "source": "The source buffer or string to extract text from",
      "start": "The starting line of the search",
      "stop": "The stopping line of the search (end-exclusive)",
      "self": ""
    },
    "doc": [
      "Iterate over all captures from all matches inside {node}",
      "{source} is needed if the query contains predicates, then the\ncaller must ensure to use a freshly parsed tree consistent\nwith the current text of the buffer (if relevant). {start_row}\nand {end_row} can be used to limit matches inside a row range\n(this is typically used with root node as the node, i e to get\nsyntax highlight matches in the current viewport). When\nomitted the start and end row values are used from the given\nnode.",
      "The iterator returns three values, a numeric id identifying\nthe capture, the captured node, and metadata from any\ndirectives processing the match. The following example shows\nhow to get captures by name:",
      ">\n\n for id, node, metadata in query:iter_captures(tree:root(), bufnr, first, last) do\n   local name = query.captures[id] -- name of the capture in the query\n   -- typically useful info about the node:\n   local type = node:type() -- type of the captured node\n   local row1, col1, row2, col2 = node:range() -- range of the capture\n   ... use the info here ...\n end\n \n<"
    ],
    "return": ["The matching capture id", "The captured node"],
    "seealso": []
  },
  "Query:iter_matches": {
    "annotations": [],
    "signature": "Query:iter_matches({self}, {node}, {source}, {start}, {stop})",
    "parameters": [
      ["", "self"],
      ["", "node"],
      ["", "source"],
      ["", "start"],
      ["", "stop"]
    ],
    "parameters_doc": {
      "node": "The node under which the search will occur",
      "source": "The source buffer or string to search",
      "start": "The starting line of the search",
      "stop": "The stopping line of the search (end-exclusive)",
      "self": ""
    },
    "doc": [
      "Iterates the matches of self on a given range.",
      "Iterate over all matches within a node. The arguments are the\nsame as for |query:iter_captures()| but the iterated values\nare different: an (1-based) index of the pattern in the query,\na table mapping capture indices to nodes, and metadata from\nany directives processing the match. If the query has more\nthan one pattern the capture table might be sparse, and e.g.\n`pairs()` method should be used over `ipairs`. Here an example\niterating over all captures in every match:",
      ">\n\n for pattern, match, metadata in cquery:iter_matches(tree:root(), bufnr, first, last) do\n   for id, node in pairs(match) do\n     local name = query.captures[id]\n     -- `node` was captured by the `name` capture in the match\n\n     local node_data = metadata[id] -- Node level metadata\n\n     ... use the info here ...\n   end\n end\n \n<"
    ],
    "return": ["The matching pattern id", "The matching match"],
    "seealso": []
  },
  "TSHighlighter:destroy": {
    "annotations": [],
    "signature": "TSHighlighter:destroy({self})",
    "parameters": [["", "self"]],
    "parameters_doc": { "self": "" },
    "doc": ["Removes all internal references to the highlighter"],
    "return": [],
    "seealso": []
  },
  "TSHighlighter:get_query": {
    "annotations": [],
    "signature": "TSHighlighter:get_query({self}, {lang})",
    "parameters": [
      ["", "self"],
      ["", "lang"]
    ],
    "parameters_doc": { "lang": "A language used by the highlighter.", "self": "" },
    "doc": ["Gets the query used for"],
    "return": [],
    "seealso": []
  },
  "add_directive": {
    "annotations": [],
    "signature": "add_directive({name}, {handler}, {force})",
    "parameters": [
      ["", "name"],
      ["", "handler"],
      ["", "force"]
    ],
    "parameters_doc": {
      "name": "the name of the directive, without leading #",
      "handler": "the handler function to be used signature will\n               be (match, pattern, bufnr, predicate, metadata)"
    },
    "doc": [
      "Adds a new directive to be used in queries",
      "Handlers can set match level data by setting directly on the\nmetadata object `metadata.key = value`, additionally, handlers\ncan set node level data by using the capture id on the\nmetadata table `metadata[capture_id].key = value`"
    ],
    "return": [],
    "seealso": []
  },
  "add_predicate": {
    "annotations": [],
    "signature": "add_predicate({name}, {handler}, {force})",
    "parameters": [
      ["", "name"],
      ["", "handler"],
      ["", "force"]
    ],
    "parameters_doc": {
      "name": "the name of the predicate, without leading #",
      "handler": "the handler function to be used signature will\n               be (match, pattern, bufnr, predicate)"
    },
    "doc": ["Adds a new predicate to be used in queries"],
    "return": [],
    "seealso": []
  },
  "get_node_text": {
    "annotations": [],
    "signature": "get_node_text({node}, {source})",
    "parameters": [
      ["", "node"],
      ["", "source"]
    ],
    "parameters_doc": {
      "node": "the node",
      "source": "The buffer or string from which the node is\n              extracted"
    },
    "doc": ["Gets the text corresponding to a given node"],
    "return": [],
    "seealso": []
  },
  "get_parser": {
    "annotations": [],
    "signature": "get_parser({bufnr}, {lang}, {opts})",
    "parameters": [
      ["", "bufnr"],
      ["", "lang"],
      ["", "opts"]
    ],
    "parameters_doc": {
      "bufnr": "The buffer the parser should be tied to",
      "lang": "The filetype of this parser",
      "opts": "Options object to pass to the created language\n             tree"
    },
    "doc": [
      "Gets the parser for this bufnr / ft combination.",
      "If needed this will create the parser. Unconditionally attach\nthe provided callback"
    ],
    "return": ["The parser"],
    "seealso": []
  },
  "get_query": {
    "annotations": [],
    "signature": "get_query({lang}, {query_name})",
    "parameters": [
      ["", "lang"],
      ["", "query_name"]
    ],
    "parameters_doc": {
      "lang": "The language to use for the query",
      "query_name": "The name of the query (i.e. \"highlights\")"
    },
    "doc": ["Returns the runtime query {query_name} for {lang}."],
    "return": ["The corresponding query, parsed."],
    "seealso": []
  },
  "get_query_files": {
    "annotations": [],
    "signature": "get_query_files({lang}, {query_name}, {is_included})",
    "parameters": [
      ["", "lang"],
      ["", "query_name"],
      ["", "is_included"]
    ],
    "parameters_doc": {
      "lang": "The language",
      "query_name": "The name of the query to load",
      "is_included": "Internal parameter, most of the time left\n                   as `nil`"
    },
    "doc": ["Gets the list of files used to make up a query"],
    "return": [],
    "seealso": []
  },
  "get_string_parser": {
    "annotations": [],
    "signature": "get_string_parser({str}, {lang}, {opts})",
    "parameters": [
      ["", "str"],
      ["", "lang"],
      ["", "opts"]
    ],
    "parameters_doc": {
      "str": "The string to parse",
      "lang": "The language of this string",
      "opts": "Options to pass to the created language tree"
    },
    "doc": ["Gets a string parser"],
    "return": [],
    "seealso": []
  },
  "inspect_language": {
    "annotations": [],
    "signature": "inspect_language({lang})",
    "parameters": [["", "lang"]],
    "parameters_doc": { "lang": "The language." },
    "doc": [
      "Inspects the provided language.",
      "Inspecting provides some useful information on the language\nlike node names, ..."
    ],
    "return": [],
    "seealso": []
  },
  "list_directives": {
    "annotations": [],
    "signature": "list_directives()",
    "parameters": [],
    "parameters_doc": {},
    "doc": ["Lists the currently available directives to use in queries."],
    "return": ["The list of supported directives."],
    "seealso": []
  },
  "list_predicates": {
    "annotations": [],
    "signature": "list_predicates()",
    "parameters": [],
    "parameters_doc": {},
    "doc": [],
    "return": ["The list of supported predicates."],
    "seealso": []
  },
  "new": {
    "annotations": [],
    "signature": "new({source}, {lang}, {opts})",
    "parameters": [
      ["", "source"],
      ["", "lang"],
      ["", "opts"]
    ],
    "parameters_doc": {
      "source": "Can be a bufnr or a string of text to\n                       parse",
      "lang": "The language this tree represents",
      "opts": "Options table",
      "opts.injections": "A table of language to injection query\n                       strings. This is useful for overriding\n                       the built-in runtime file searching for\n                       the injection language query per\n                       language."
    },
    "doc": [
      "Represents a single treesitter parser for a language. The\nlanguage can contain child languages with in its range, hence\nthe tree."
    ],
    "return": [],
    "seealso": []
  },
  "parse_query": {
    "annotations": [],
    "signature": "parse_query({lang}, {query})",
    "parameters": [
      ["", "lang"],
      ["", "query"]
    ],
    "parameters_doc": {
      "lang": "(string) The language",
      "query": "(string) A string containing the query (s-expr\n             syntax)"
    },
    "doc": [
      "Parse {query} as a string. (If the query is in a file, the\ncaller should read the contents into a string before calling).",
      "Returns a `Query` (see |lua-treesitter-query|) object which\ncan be used to search nodes in the syntax tree for the\npatterns defined in {query} using `iter_*` methods below.",
      "Exposes `info` and `captures` with additional context about {query}.\n• `captures` contains the list of unique capture names defined\n  in {query}. -`info.captures` also points to `captures`.\n• `info.patterns` contains information about predicates.\n"
    ],
    "return": ["The query"],
    "seealso": []
  },
  "require_language": {
    "annotations": [],
    "signature": "require_language({lang}, {path}, {silent})",
    "parameters": [
      ["", "lang"],
      ["", "path"],
      ["", "silent"]
    ],
    "parameters_doc": {
      "lang": "The language the parser should parse",
      "path": "Optional path the parser is located at",
      "silent": "Don't throw an error if language not found"
    },
    "doc": [
      "Asserts that the provided language is installed, and\noptionally provide a path for the parser",
      "Parsers are searched in the `parser` runtime directory."
    ],
    "return": [],
    "seealso": []
  },
  "set_query": {
    "annotations": [],
    "signature": "set_query({lang}, {query_name}, {text})",
    "parameters": [
      ["", "lang"],
      ["", "query_name"],
      ["", "text"]
    ],
    "parameters_doc": {
      "lang": "string: The language to use for the query",
      "query_name": "string: The name of the query (i.e.\n                  \"highlights\")",
      "text": "string: The query text (unparsed)."
    },
    "doc": [
      "Sets the runtime query {query_name} for {lang}",
      "This allows users to override any runtime files and/or\nconfiguration set by plugins."
    ],
    "return": [],
    "seealso": []
  }
}
